@use "sass:math";

$grid-columns: 12;
$grid-gap: (
    "0": 0,
    "1": 5px,
    "2": 10px,
    "3": 15px,
    "4": 20px,
    "5": 25px,
    "6": 30px,
);
$layout-values: flex-start, flex-end, center, space-between, space-around;

@mixin sizingContent($value: 12) {
    box-sizing: border-box;
    flex-grow: 0;
    width: math.div($value * 100%, $grid-columns);
}

.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;
}

.row {
    display: flex;
    flex-flow: row wrap;
}

@each $key, $val in $grid-gap {
    .gap-#{$key} > * {
        padding: $val;
    }
    .gap-#{$key} {
        margin-left: -$val;
        margin-right: -$val;
    }
}

@each $val in $layout-values {
    .justify-#{$val} {
        justify-content: $val;
    }
}

@each $val in $layout-values {
    .justify-#{$val} {
        justify-content: $val;
    }

    .align-#{$val} {
        align-items: $val;
    }
}

@include xs {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xs {
            @include sizingContent($i);
        }
    }
}

@include sm {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-sm {
            @include sizingContent($i);
        }
    }
}

@include md {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-md {
            @include sizingContent($i);
        }
    }
}

@include lg {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-lg {
            @include sizingContent($i);
        }
    }
}

@include xl {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xl {
            @include sizingContent($i);
        }
    }
}